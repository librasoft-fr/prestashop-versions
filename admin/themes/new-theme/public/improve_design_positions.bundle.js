/*! For license information please see improve_design_positions.bundle.js.LICENSE.txt */
(()=>{var t={12158:(t,e,o)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(o(99663)),r=i(o(22600));function i(t){return t&&t.__esModule?t:{default:t}}var s=window.$,u=function(){function t(){(0,n.default)(this,t);var e=this;e.$hookStatus=s(".hook-switch-action"),e.$modulePositionsForm=s("#module-positions-form"),e.$hookStatus.on("change",(function(t){t.stopImmediatePropagation(),e.toogleHookStatus(s(this))}))}return(0,r.default)(t,[{key:"toogleHookStatus",value:function(t){s.ajax({type:"POST",headers:{"cache-control":"no-cache"},url:this.$modulePositionsForm.data("togglestatus-url"),data:{hookId:t.data("hook-id")},success:function(e){e.status?(window.showSuccessMessage(e.message),t.closest(".hook-panel").find(".module-list, .module-list-disabled").fadeTo(500,e.hook_status?1:.5)):window.showErrorMessage(e.message)}})}}]),t}();e.default=u},59591:(t,e,o)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=s(o(12424)),r=s(o(99663)),i=s(o(22600));function s(t){return t&&t.__esModule?t:{default:t}}var u=window.$,a=function(){function t(){if((0,r.default)(this,t),0!==u("#position-filters").length){var e=this;e.$panelSelection=u("#modules-position-selection-panel"),e.$panelSelectionSingleSelection=u("#modules-position-single-selection"),e.$panelSelectionMultipleSelection=u("#modules-position-multiple-selection"),e.$panelSelectionOriginalY=e.$panelSelection.offset().top,e.$showModules=u("#show-modules"),e.$modulesList=u(".modules-position-checkbox"),e.$hookPosition=u("#hook-position"),e.$hookSearch=u("#hook-search"),e.$modulePositionsForm=u("#module-positions-form"),e.$moduleUnhookButton=u("#unhook-button-position-bottom"),e.$moduleButtonsUpdate=u(".module-buttons-update .btn"),e.handleList(),e.handleSortable(),u('input[name="general[enable_tos]"]').on("change",(function(){return e.handle()}))}}return(0,i.default)(t,[{key:"handleList",value:function(){var t=this;u(window).on("scroll",(function(){var e=u(window).scrollTop();t.$panelSelection.css("top",e<20?0:e-t.$panelSelectionOriginalY)})),t.$modulesList.on("change",(function(){var e=t.$modulesList.filter(":checked").length;0===e?(t.$moduleUnhookButton.hide(),t.$panelSelection.hide(),t.$panelSelectionSingleSelection.hide(),t.$panelSelectionMultipleSelection.hide()):1===e?(t.$moduleUnhookButton.show(),t.$panelSelection.show(),t.$panelSelectionSingleSelection.show(),t.$panelSelectionMultipleSelection.hide()):(t.$moduleUnhookButton.show(),t.$panelSelection.show(),t.$panelSelectionSingleSelection.hide(),t.$panelSelectionMultipleSelection.show(),u("#modules-position-selection-count").html(e))})),t.$panelSelection.find("button").click((function(){u('button[name="unhookform"]').trigger("click")})),t.$hooksList=[],u("section.hook-panel .hook-name").each((function(){var e=u(this);t.$hooksList.push({title:e.html(),element:e,container:e.parents(".hook-panel")})})),t.$showModules.select2(),t.$showModules.on("change",(function(){t.modulesPositionFilterHooks()})),t.$hookPosition.on("change",(function(){t.modulesPositionFilterHooks()})),t.$hookSearch.on("input",(function(){t.modulesPositionFilterHooks()})),t.$hookSearch.on("keypress",(function(t){return 13!==(t.keyCode||t.which)})),u(".hook-checker").on("click",(function(){u(".hook"+u(this).data("hook-id")).prop("checked",u(this).prop("checked"))})),t.$modulesList.on("click",(function(){u("#Ghook"+u(this).data("hook-id")).prop("checked",0===u(".hook"+u(this).data("hook-id")+":not(:checked)").length)})),t.$moduleButtonsUpdate.on("click",(function(){var e,o=u(this),n=o.closest(".module-item");return 0===(e=o.data("way")?n.next(".module-item"):n.prev(".module-item")).length||(o.data("way")?n.insertAfter(e):n.insertBefore(e),t.updatePositions({hookId:o.data("hook-id"),moduleId:o.data("module-id"),way:o.data("way"),positions:[]},o.closest("ul"))),!1}))}},{key:"handleSortable",value:function(){var t=this;u(".sortable").sortable({forcePlaceholderSize:!0,start:function(t,e){u(this).data("previous-index",e.item.index())},update:function(e,o){var r=o.item.attr("id").split("_"),i=(0,n.default)(r,2),s={hookId:i[0],moduleId:i[1],way:u(this).data("previous-index")<o.item.index()?1:0,positions:[]};t.updatePositions(s,u(e.target))}})}},{key:"updatePositions",value:function(t,e){u.each(e.children(),(function(e,o){t.positions.push(u(o).attr("id"))})),u.ajax({type:"POST",headers:{"cache-control":"no-cache"},url:this.$modulePositionsForm.data("update-url"),data:t,success:function(){var t=0;u.each(e.children(),(function(e,o){t+=1,u(o).find(".index-position").html(t)})),window.showSuccessMessage(window.update_success_msg)}})}},{key:"modulesPositionFilterHooks",value:function(){for(var t=this,e=t.$hookSearch.val(),o=t.$showModules.val(),n=new RegExp("("+e+")","gi"),r=0;r<t.$hooksList.length;r+=1)t.$hooksList[r].container.toggle(""===e&&"all"===o),t.$hooksList[r].element.html(t.$hooksList[r].title),t.$hooksList[r].container.find(".module-item").removeClass("highlight");if(""!==e||"all"!==o){for(var i=u(),s=u(),a=void 0,l=0;l<t.$hooksList.length;l+=1)"all"!==o&&(a=t.$hooksList[l].container.find(".module-position-"+o)).length>0&&(i=i.add(t.$hooksList[l].container),a.addClass("highlight")),""!==e&&-1!==t.$hooksList[l].title.toLowerCase().search(e.toLowerCase())&&(s=s.add(t.$hooksList[l].container),t.$hooksList[l].element.html(t.$hooksList[l].title.replace(n,'<span class="highlight">$1</span>')));"all"===o&&""!==e?s.show():""===e&&"all"!==o?i.show():s.filter(i).show()}if(!t.$hookPosition.prop("checked"))for(var c=0;c<t.$hooksList.length;c+=1)t.$hooksList[c].container.is(".hook-position")&&t.$hooksList[c].container.hide()}}]),t}();e.default=a},26378:(t,e,o)=>{t.exports={default:o(3597),__esModule:!0}},40863:(t,e,o)=>{t.exports={default:o(21035),__esModule:!0}},32242:(t,e,o)=>{t.exports={default:o(33391),__esModule:!0}},99663:(t,e)=>{"use strict";e.__esModule=!0,e.default=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},22600:(t,e,o)=>{"use strict";e.__esModule=!0;var n,r=(n=o(32242))&&n.__esModule?n:{default:n};e.default=function(){function t(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,r.default)(t,n.key,n)}}return function(e,o,n){return o&&t(e.prototype,o),n&&t(e,n),e}}()},12424:(t,e,o)=>{"use strict";e.__esModule=!0;var n=i(o(40863)),r=i(o(26378));function i(t){return t&&t.__esModule?t:{default:t}}e.default=function(t,e){if(Array.isArray(t))return t;if((0,n.default)(Object(t)))return function(t,e){var o=[],n=!0,i=!1,s=void 0;try{for(var u,a=(0,r.default)(t);!(n=(u=a.next()).done)&&(o.push(u.value),!e||o.length!==e);n=!0);}catch(t){i=!0,s=t}finally{try{!n&&a.return&&a.return()}finally{if(i)throw s}}return o}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}},3597:(t,e,o)=>{o(73871),o(91867),t.exports=o(46459)},21035:(t,e,o)=>{o(73871),o(91867),t.exports=o(89553)},33391:(t,e,o)=>{o(31477);var n=o(34579).Object;t.exports=function(t,e,o){return n.defineProperty(t,e,o)}},85663:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},79003:t=>{t.exports=function(){}},12159:(t,e,o)=>{var n=o(36727);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},57428:(t,e,o)=>{var n=o(7932),r=o(78728),i=o(16531);t.exports=function(t){return function(e,o,s){var u,a=n(e),l=r(a.length),c=i(s,l);if(t&&o!=o){for(;l>c;)if((u=a[c++])!=u)return!0}else for(;l>c;c++)if((t||c in a)&&a[c]===o)return t||c||0;return!t&&-1}}},14677:(t,e,o)=>{var n=o(32894),r=o(22939)("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,o,s;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(o=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),r))?o:i?n(e):"Object"==(s=n(e))&&"function"==typeof e.callee?"Arguments":s}},32894:t=>{var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},34579:t=>{var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)},19216:(t,e,o)=>{var n=o(85663);t.exports=function(t,e,o){if(n(t),void 0===e)return t;switch(o){case 1:return function(o){return t.call(e,o)};case 2:return function(o,n){return t.call(e,o,n)};case 3:return function(o,n,r){return t.call(e,o,n,r)}}return function(){return t.apply(e,arguments)}}},8333:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},89666:(t,e,o)=>{t.exports=!o(7929)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},97467:(t,e,o)=>{var n=o(36727),r=o(33938).document,i=n(r)&&n(r.createElement);t.exports=function(t){return i?r.createElement(t):{}}},73338:t=>{t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},83856:(t,e,o)=>{var n=o(33938),r=o(34579),i=o(19216),s=o(41818),u=o(27069),a=function(t,e,o){var l,c,f,p=t&a.F,h=t&a.G,d=t&a.S,v=t&a.P,m=t&a.B,y=t&a.W,g=h?r:r[e]||(r[e]={}),k=g.prototype,w=h?n:d?n[e]:(n[e]||{}).prototype;for(l in h&&(o=e),o)(c=!p&&w&&void 0!==w[l])&&u(g,l)||(f=c?w[l]:o[l],g[l]=h&&"function"!=typeof w[l]?o[l]:m&&c?i(f,n):y&&w[l]==f?function(t){var e=function(e,o,n){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,o)}return new t(e,o,n)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):v&&"function"==typeof f?i(Function.call,f):f,v&&((g.virtual||(g.virtual={}))[l]=f,t&a.R&&k&&!k[l]&&s(k,l,f)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},7929:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},33938:t=>{var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},27069:t=>{var e={}.hasOwnProperty;t.exports=function(t,o){return e.call(t,o)}},41818:(t,e,o)=>{var n=o(4743),r=o(83101);t.exports=o(89666)?function(t,e,o){return n.f(t,e,r(1,o))}:function(t,e,o){return t[e]=o,t}},54881:(t,e,o)=>{var n=o(33938).document;t.exports=n&&n.documentElement},33758:(t,e,o)=>{t.exports=!o(89666)&&!o(7929)((function(){return 7!=Object.defineProperty(o(97467)("div"),"a",{get:function(){return 7}}).a}))},50799:(t,e,o)=>{var n=o(32894);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},36727:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},33945:(t,e,o)=>{"use strict";var n=o(98989),r=o(83101),i=o(25378),s={};o(41818)(s,o(22939)("iterator"),(function(){return this})),t.exports=function(t,e,o){t.prototype=n(s,{next:r(1,o)}),i(t,e+" Iterator")}},45700:(t,e,o)=>{"use strict";var n=o(16227),r=o(83856),i=o(57470),s=o(41818),u=o(15449),a=o(33945),l=o(25378),c=o(95089),f=o(22939)("iterator"),p=!([].keys&&"next"in[].keys()),h="keys",d="values",v=function(){return this};t.exports=function(t,e,o,m,y,g,k){a(o,e,m);var w,S,x,$=function(t){if(!p&&t in M)return M[t];switch(t){case h:case d:return function(){return new o(this,t)}}return function(){return new o(this,t)}},_=e+" Iterator",b=y==d,L=!1,M=t.prototype,O=M[f]||M["@@iterator"]||y&&M[y],P=O||$(y),j=y?b?$("entries"):P:void 0,T="Array"==e&&M.entries||O;if(T&&(x=c(T.call(new t)))!==Object.prototype&&x.next&&(l(x,_,!0),n||"function"==typeof x[f]||s(x,f,v)),b&&O&&O.name!==d&&(L=!0,P=function(){return O.call(this)}),n&&!k||!p&&!L&&M[f]||s(M,f,P),u[e]=P,u[_]=v,y)if(w={values:b?P:$(d),keys:g?P:$(h),entries:j},k)for(S in w)S in M||i(M,S,w[S]);else r(r.P+r.F*(p||L),e,w);return w}},85084:t=>{t.exports=function(t,e){return{value:e,done:!!t}}},15449:t=>{t.exports={}},16227:t=>{t.exports=!0},98989:(t,e,o)=>{var n=o(12159),r=o(57856),i=o(73338),s=o(58989)("IE_PROTO"),u=function(){},a=function(){var t,e=o(97467)("iframe"),n=i.length;for(e.style.display="none",o(54881).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),a=t.F;n--;)delete a.prototype[i[n]];return a()};t.exports=Object.create||function(t,e){var o;return null!==t?(u.prototype=n(t),o=new u,u.prototype=null,o[s]=t):o=a(),void 0===e?o:r(o,e)}},4743:(t,e,o)=>{var n=o(12159),r=o(33758),i=o(33206),s=Object.defineProperty;e.f=o(89666)?Object.defineProperty:function(t,e,o){if(n(t),e=i(e,!0),n(o),r)try{return s(t,e,o)}catch(t){}if("get"in o||"set"in o)throw TypeError("Accessors not supported!");return"value"in o&&(t[e]=o.value),t}},57856:(t,e,o)=>{var n=o(4743),r=o(12159),i=o(46162);t.exports=o(89666)?Object.defineProperties:function(t,e){r(t);for(var o,s=i(e),u=s.length,a=0;u>a;)n.f(t,o=s[a++],e[o]);return t}},95089:(t,e,o)=>{var n=o(27069),r=o(66530),i=o(58989)("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=r(t),n(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},12963:(t,e,o)=>{var n=o(27069),r=o(7932),i=o(57428)(!1),s=o(58989)("IE_PROTO");t.exports=function(t,e){var o,u=r(t),a=0,l=[];for(o in u)o!=s&&n(u,o)&&l.push(o);for(;e.length>a;)n(u,o=e[a++])&&(~i(l,o)||l.push(o));return l}},46162:(t,e,o)=>{var n=o(12963),r=o(73338);t.exports=Object.keys||function(t){return n(t,r)}},83101:t=>{t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},57470:(t,e,o)=>{t.exports=o(41818)},25378:(t,e,o)=>{var n=o(4743).f,r=o(27069),i=o(22939)("toStringTag");t.exports=function(t,e,o){t&&!r(t=o?t:t.prototype,i)&&n(t,i,{configurable:!0,value:e})}},58989:(t,e,o)=>{var n=o(20250)("keys"),r=o(65730);t.exports=function(t){return n[t]||(n[t]=r(t))}},20250:(t,e,o)=>{var n=o(34579),r=o(33938),i="__core-js_shared__",s=r[i]||(r[i]={});(t.exports=function(t,e){return s[t]||(s[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:o(16227)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},90510:(t,e,o)=>{var n=o(11052),r=o(8333);t.exports=function(t){return function(e,o){var i,s,u=String(r(e)),a=n(o),l=u.length;return a<0||a>=l?t?"":void 0:(i=u.charCodeAt(a))<55296||i>56319||a+1===l||(s=u.charCodeAt(a+1))<56320||s>57343?t?u.charAt(a):i:t?u.slice(a,a+2):s-56320+(i-55296<<10)+65536}}},16531:(t,e,o)=>{var n=o(11052),r=Math.max,i=Math.min;t.exports=function(t,e){return(t=n(t))<0?r(t+e,0):i(t,e)}},11052:t=>{var e=Math.ceil,o=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?o:e)(t)}},7932:(t,e,o)=>{var n=o(50799),r=o(8333);t.exports=function(t){return n(r(t))}},78728:(t,e,o)=>{var n=o(11052),r=Math.min;t.exports=function(t){return t>0?r(n(t),9007199254740991):0}},66530:(t,e,o)=>{var n=o(8333);t.exports=function(t){return Object(n(t))}},33206:(t,e,o)=>{var n=o(36727);t.exports=function(t,e){if(!n(t))return t;var o,r;if(e&&"function"==typeof(o=t.toString)&&!n(r=o.call(t)))return r;if("function"==typeof(o=t.valueOf)&&!n(r=o.call(t)))return r;if(!e&&"function"==typeof(o=t.toString)&&!n(r=o.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},65730:t=>{var e=0,o=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+o).toString(36))}},22939:(t,e,o)=>{var n=o(20250)("wks"),r=o(65730),i=o(33938).Symbol,s="function"==typeof i;(t.exports=function(t){return n[t]||(n[t]=s&&i[t]||(s?i:r)("Symbol."+t))}).store=n},83728:(t,e,o)=>{var n=o(14677),r=o(22939)("iterator"),i=o(15449);t.exports=o(34579).getIteratorMethod=function(t){if(null!=t)return t[r]||t["@@iterator"]||i[n(t)]}},46459:(t,e,o)=>{var n=o(12159),r=o(83728);t.exports=o(34579).getIterator=function(t){var e=r(t);if("function"!=typeof e)throw TypeError(t+" is not iterable!");return n(e.call(t))}},89553:(t,e,o)=>{var n=o(14677),r=o(22939)("iterator"),i=o(15449);t.exports=o(34579).isIterable=function(t){var e=Object(t);return void 0!==e[r]||"@@iterator"in e||i.hasOwnProperty(n(e))}},3882:(t,e,o)=>{"use strict";var n=o(79003),r=o(85084),i=o(15449),s=o(7932);t.exports=o(45700)(Array,"Array",(function(t,e){this._t=s(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,o=this._i++;return!t||o>=t.length?(this._t=void 0,r(1)):r(0,"keys"==e?o:"values"==e?t[o]:[o,t[o]])}),"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},31477:(t,e,o)=>{var n=o(83856);n(n.S+n.F*!o(89666),"Object",{defineProperty:o(4743).f})},91867:(t,e,o)=>{"use strict";var n=o(90510)(!0);o(45700)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,o=this._i;return o>=e.length?{value:void 0,done:!0}:(t=n(e,o),this._i+=t.length,{value:t,done:!1})}))},73871:(t,e,o)=>{o(3882);for(var n=o(33938),r=o(41818),i=o(15449),s=o(22939)("toStringTag"),u="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),a=0;a<u.length;a++){var l=u[a],c=n[l],f=c&&c.prototype;f&&!f[s]&&r(f,s,l),i[l]=i.Array}}},e={};function o(n){var r=e[n];if(void 0!==r)return r.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,o),i.exports}(()=>{"use strict";var t=n(o(59591)),e=n(o(12158));function n(t){return t&&t.__esModule?t:{default:t}}(0,window.$)((function(){new t.default,new e.default}))})(),window.improve_design_positions={}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,